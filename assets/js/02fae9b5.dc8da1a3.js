"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{76647:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),c=["components"],l={},i=void 0,u={type:"mdx",permalink:"/state-machine/",source:"@site/pages/index.md"},s=[],k={toc:s};function p(n){var e=n.components,t=(0,o.Z)(n,c);return(0,r.kt)("wrapper",(0,a.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,(0,r.kt)("center",null,"\ud83e\udd16 StateMachine")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"An immutable class for handling the state of things, where the design is a copy of Rust's sm crate, but with a few additions and changes."),(0,r.kt)("p",null,"API: ",(0,r.kt)("a",{parentName:"p",href:"https://overlinejunior.github.io/state-machine"},"https://overlinejunior.github.io/state-machine"),(0,r.kt)("br",{parentName:"p"}),"\n","Wally: ",(0,r.kt)("a",{parentName:"p",href:"https://wally.run/package/overlinejunior/state-machine"},"https://wally.run/package/overlinejunior/state-machine")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local Lock = StateMachine {\n    TurnKey = {\n        Locked = 'Unlocked',\n        Unlocked = 'Locked',\n    },\n\n    Break = {\n        Locked = 'Broken',\n        Unlocked = 'Broken',\n    },\n}\n\nlocal lock = Lock('Locked')\nlock = lock:transition('TurnKey')\n\nassert(lock:State(), 'Unlocked')\nassert(lock:Trigger():Unwrap(), 'TurnKey')\n")))}p.isMDXComponent=!0}}]);