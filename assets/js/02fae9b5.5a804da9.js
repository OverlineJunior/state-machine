"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{76647:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return k},default:function(){return d}});var o=t(87462),c=t(63366),a=(t(67294),t(3905)),r=["components"],l={},s=void 0,u={type:"mdx",permalink:"/state-machine/",source:"@site/pages/index.md"},k=[],i={toc:k};function d(n){var e=n.components,t=(0,c.Z)(n,r);return(0,a.kt)("wrapper",(0,o.Z)({},i,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",null,(0,a.kt)("center",null,"\ud83e\udd16 StateMachine")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"An immutable class for handling the state of things, where the design is a copy of Rust's sm crate, but with a few additions and changes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local Lock = StateMachine {\n    TurnKey = {\n        Locked = 'Unlocked',\n        Unlocked = 'Locked',\n    },\n\n    Break = {\n        Locked = 'Broken',\n        Unlocked = 'Broken',\n    },\n}\n\nlocal lock = Lock('Locked')\nlock = lock:transition('TurnKey')\n\nassert(lock:State(), 'Unlocked')\nassert(lock:Trigger():Unwrap(), 'TurnKey')\n")))}d.isMDXComponent=!0}}]);